package createjs.easeljs;

import js.html.Event;
import js.html.MouseEvent;

/**
* Passed as the parameter to all mouse/pointer/touch related events. For a listing of mouse events and their properties,
*	see the {{#crossLink "DisplayObject"}}{{/crossLink}} and {{#crossLink "Stage"}}{{/crossLink}} event listings.
*/
@:native("createjs.MouseEvent")
extern class MouseEvent extends Event
{
	/**
	* Indicates whether the event was generated by a touch input (versus a mouse input).
	*/
	public var isTouch:Bool;
	
	/**
	* Indicates whether this is the primary pointer in a multitouch environment. This will always be true for the mouse. For touch pointers, the first pointer in the current stack will be considered the primary pointer.
	*/
	public var primary:Bool;
	
	/**
	* Returns the x position of the mouse in the local coordinate system of the current target (ie. the dispatcher).
	*/
	public var localX:Float;
	
	/**
	* Returns the y position of the mouse in the local coordinate system of the current target (ie. the dispatcher).
	*/
	public var localY:Float;
	
	/**
	* The native MouseEvent generated by the browser. The properties and API for this event may differ between browsers. This property will be null if the EaselJS property was not directly generated from a native MouseEvent.
	*/
	public var nativeEvent:MouseEvent;
	
	/**
	* The normalized x position on the stage. This will always be within the range 0 to stage width.
	*/
	public var stageX:Float;
	
	/**
	* The normalized y position on the stage. This will always be within the range 0 to stage height.
	*/
	public var stageY:Float;
	
	/**
	* The raw x position relative to the stage. Normally this will be the same as the stageX value, unless stage.mouseMoveOutside is true and the pointer is outside of the stage bounds.
	*/
	public var rawX:Float;
	
	/**
	* The raw y position relative to the stage. Normally this will be the same as the stageY value, unless stage.mouseMoveOutside is true and the pointer is outside of the stage bounds.
	*/
	public var rawY:Float;
	
	/**
	* The secondary target for the event, if applicable. This is used for mouseout/rollout events to indicate the object that the mouse entered from, mouseover/rollover for the object the mouse exited, and stagemousedown/stagemouseup events for the object that was the under the cursor, if any.  Only valid interaction targets will be returned (ie. objects with mouse listeners or a cursor set).
	*/
	public var relatedTarget:DisplayObject;
	
	/**
	* The unique id for the pointer (touch point or cursor). This will be either -1 for the mouse, or the system supplied id value.
	*/
	public var pointerID:Float;
	
	/**
	* Passed as the parameter to all mouse/pointer/touch related events. For a listing of mouse events and their properties,
	*	see the {{#crossLink "DisplayObject"}}{{/crossLink}} and {{#crossLink "Stage"}}{{/crossLink}} event listings.
	* @param type The event type.
	* @param bubbles Indicates whether the event will bubble through the display list.
	* @param cancelable Indicates whether the default behaviour of this event can be cancelled.
	* @param stageX The normalized x position relative to the stage.
	* @param stageY The normalized y position relative to the stage.
	* @param nativeEvent The native DOM event related to this mouse event.
	* @param pointerID The unique id for the pointer.
	* @param primary Indicates whether this is the primary pointer in a multitouch environment.
	* @param rawX The raw x position relative to the stage.
	* @param rawY The raw y position relative to the stage.
	* @param relatedTarget The secondary target for the event.
	*/
	public function new(type:String, bubbles:Bool, cancelable:Bool, stageX:Float, stageY:Float, nativeEvent:MouseEvent, pointerID:Float, primary:Bool, rawX:Float, rawY:Float, relatedTarget:DisplayObject):Void;
	
	/**
	* Returns a clone of the MouseEvent instance.
	*/
	public function clone():MouseEvent;
	
	/**
	* Returns a string representation of this object.
	*/
	public function toString():String;
	
}
