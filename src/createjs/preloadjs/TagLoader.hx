package createjs.preloadjs;

/**
* A preloader that loads items using a tag-based approach. HTML audio and images can use this loader to load
*	content cross-domain without security errors, whereas anything loaded with XHR has potential issues with cross-
*	domain requests.
*	
*	Note for audio tags, TagLoader relies on the <code>canPlayThrough</code> event, which fires when the buffer
*	is full enough to play the audio all the way through at the current download speed. This completely preloads most
*	sound effects, however longer tracks like background audio will only load a portion before the event is fired.
*	Most browsers (all excluding Chrome) will continue to preload once this is fired, so this is considered good
*	enough for most cases.
*/
@:native("createjs.TagLoader")
extern class TagLoader extends AbstractLoader
{	
	/**
	* A reference to a bound function, which we need in order to properly remove the event handler when the load completes.
	*/
	private var _tagCompleteProxy:Dynamic;
	
	/**
	* Determines if the load item is an audio tag, since we take some specific approaches to properly load audio.
	*/
	public var _isAudio:Bool;
	
	/**
	* The HTML tag or JavaScript object this loader uses to preload content. Note that a tag may be a custom object that matches the API of an HTML tag (load method, onload callback). For example, flash audio from SoundJS passes in a custom object to handle preloading for Flash audio and WebAudio.
	*/
	private var _tag:Dynamic;
	
	/**
	* The timeout that is fired if nothing is loaded after a certain delay. See the <code>LoadQueue.LOAD_TIMEOUT</code> for the timeout duration.
	*/
	private var _loadTimeout:Float;
	
	/**
	* A preloader that loads items using a tag-based approach. HTML audio and images can use this loader to load
	*	content cross-domain without security errors, whereas anything loaded with XHR has potential issues with cross-
	*	domain requests.
	*	
	*	Note for audio tags, TagLoader relies on the <code>canPlayThrough</code> event, which fires when the buffer
	*	is full enough to play the audio all the way through at the current download speed. This completely preloads most
	*	sound effects, however longer tracks like background audio will only load a portion before the event is fired.
	*	Most browsers (all excluding Chrome) will continue to preload once this is fired, so this is considered good
	*	enough for most cases.
	* @param item The item to load. Please see {{#crossLink "LoadQueue/loadFile"}}{{/crossLink}} for
	*	information on load items.
	*/
	public function new(item:Dynamic):Void;
	
	/**
	* Clean up the loader.
	*	This stops any timers and removes references to prevent errant callbacks and clean up memory.
	*/
	private function _clean():Dynamic;
	
	/**
	* Get the loaded content. This is usually an HTML tag or other tag-style object that has been fully loaded. If the
	*	loader is not complete, this will be null.
	*/
	public function getResult():Dynamic;
	
	/**
	* Handle a load (complete) event. This is called by tag callbacks, but also by readyStateChange and canPlayThrough
	*	events. Once loaded, the item is dispatched to the {{#crossLink "LoadQueue"}}{{/crossLink}}.
	* @param event A load event from a tag. This is sometimes called from other handlers without an event.
	*/
	private function _handleLoad(?event:Dynamic):Dynamic;
	
	/**
	* Handle a stalled audio event. The main place we seem to get these is with HTMLAudio in Chrome when we try and
	*	playback audio that is already in a load, but not complete.
	*/
	private function _handleStalled():Dynamic;
	
	/**
	* Handle an audio timeout. Newer browsers get a callback from the tags, but older ones may require a setTimeout
	*	to handle it. The setTimeout is always running until a response is handled by the browser.
	*/
	private function _handleTimeout():Dynamic;
	
	/**
	* Handle an error event generated by the tag.
	*/
	private function _handleError():Dynamic;
	
	/**
	* Handle the readyStateChange event from a tag. We sometimes need this in place of the onload event (mainly SCRIPT
	*	and LINK tags), but other cases may exist.
	*/
	private function _handleReadyStateChange():Dynamic;
}
