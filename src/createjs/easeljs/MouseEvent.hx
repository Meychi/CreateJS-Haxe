package createjs.easeljs;

/**
* This is passed as the parameter to mousedown, mouseup, mousemove, stagemouseup, stagemousedown, mouseover, mouseout
*	and click events on {{#crossLink "DisplayObject"}}{{/crossLink}} instances.
*/
@:native("createjs.MouseEvent")
extern class MouseEvent
{	
	/**
	* For events of type "onPress" only you can assign a handler to the onMouseMove property. This handler will be called every time the mouse is moved until the mouse is released. This is useful for operations such as drag and drop.
	*/
	public var onMouseMove:Dynamic;
	
	/**
	* For events of type "onPress" only you can assign a handler to the onMouseUp property. This handler will be called every time the mouse is moved until the mouse is released. This is useful for operations such as drag and drop.
	*/
	public var onMouseUp:Dynamic;
	
	/**
	* Indicates whether this is the primary pointer in a multitouch environment. This will always be true for the mouse. For touch pointers, the first pointer in the current stack will be considered the primary pointer.
	*/
	public var primary:Bool;
	
	/**
	* The display object this event relates to.
	*/
	public var target:DisplayObject;
	
	/**
	* The native MouseEvent generated by the browser. The properties and API for this event may differ between browsers. This property will be null if the EaselJS property was not directly generated from a native MouseEvent.
	*/
	public var nativeEvent:MouseEvent;
	
	/**
	* The normalized x position on the stage. This will always be within the range 0 to stage width.
	*/
	public var stageX:Float;
	
	/**
	* The normalized y position on the stage. This will always be within the range 0 to stage height.
	*/
	public var stageY:Float;
	
	/**
	* The raw x position relative to the stage. Normally this will be the same as the stageX value, unless stage.mouseMoveOutside is true and the pointer is outside of the stage bounds.
	*/
	public var rawX:Float;
	
	/**
	* The raw y position relative to the stage. Normally this will be the same as the stageY value, unless stage.mouseMoveOutside is true and the pointer is outside of the stage bounds.
	*/
	public var rawY:Float;
	
	/**
	* The type of mouse event. This will be the same as the handler it maps to (onPress, onMouseDown, onMouseUp, onMouseMove, or onClick).
	*/
	public var type:String;
	
	/**
	* The unique id for the pointer (touch point or cursor). This will be either -1 for the mouse, or the system supplied id value.
	*/
	public var pointerID:Float;
	
	/**
	* Initialization method.
	*/
	private function initialize():Dynamic;
	
	/**
	* Returns a clone of the MouseEvent instance.
	*/
	public function clone():MouseEvent;
	
	/**
	* Returns a string representation of this object.
	*/
	public function toString():String;
	
	/**
	* This is passed as the parameter to mousedown, mouseup, mousemove, stagemouseup, stagemousedown, mouseover, mouseout
	*	and click events on {{#crossLink "DisplayObject"}}{{/crossLink}} instances.
	* @param type The event type.
	* @param stageX The normalized x position relative to the stage.
	* @param stageY The normalized y position relative to the stage.
	* @param target The display object this event relates to. Note that this will be overwritten when the event is dispatched via EventDispatcher.
	* @param nativeEvent The native DOM event related to this mouse event.
	* @param pointerID The unique id for the pointer.
	* @param primary Indicates whether this is the primary pointer in a multitouch environment.
	* @param rawX The raw x position relative to the stage.
	* @param rawY The raw y position relative to the stage.
	*/
	public function new(type:String, stageX:Float, stageY:Float, target:DisplayObject, nativeEvent:MouseEvent, pointerID:Float, primary:Bool, rawX:Float, rawY:Float):Void;
}
